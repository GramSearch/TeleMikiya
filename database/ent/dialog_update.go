// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/xyenon/telemikiya/database/ent/dialog"
	"github.com/xyenon/telemikiya/database/ent/message"
	"github.com/xyenon/telemikiya/database/ent/predicate"
	"github.com/xyenon/telemikiya/types"
)

// DialogUpdate is the builder for updating Dialog entities.
type DialogUpdate struct {
	config
	hooks     []Hook
	mutation  *DialogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DialogUpdate builder.
func (du *DialogUpdate) Where(ps ...predicate.Dialog) *DialogUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetTitle sets the "title" field.
func (du *DialogUpdate) SetTitle(s string) *DialogUpdate {
	du.mutation.SetTitle(s)
	return du
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (du *DialogUpdate) SetNillableTitle(s *string) *DialogUpdate {
	if s != nil {
		du.SetTitle(*s)
	}
	return du
}

// SetType sets the "type" field.
func (du *DialogUpdate) SetType(tt types.DialogType) *DialogUpdate {
	du.mutation.SetType(tt)
	return du
}

// SetNillableType sets the "type" field if the given value is not nil.
func (du *DialogUpdate) SetNillableType(tt *types.DialogType) *DialogUpdate {
	if tt != nil {
		du.SetType(*tt)
	}
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DialogUpdate) SetUpdatedAt(t time.Time) *DialogUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (du *DialogUpdate) SetNillableUpdatedAt(t *time.Time) *DialogUpdate {
	if t != nil {
		du.SetUpdatedAt(*t)
	}
	return du
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (du *DialogUpdate) AddMessageIDs(ids ...uuid.UUID) *DialogUpdate {
	du.mutation.AddMessageIDs(ids...)
	return du
}

// AddMessages adds the "messages" edges to the Message entity.
func (du *DialogUpdate) AddMessages(m ...*Message) *DialogUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.AddMessageIDs(ids...)
}

// Mutation returns the DialogMutation object of the builder.
func (du *DialogUpdate) Mutation() *DialogMutation {
	return du.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (du *DialogUpdate) ClearMessages() *DialogUpdate {
	du.mutation.ClearMessages()
	return du
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (du *DialogUpdate) RemoveMessageIDs(ids ...uuid.UUID) *DialogUpdate {
	du.mutation.RemoveMessageIDs(ids...)
	return du
}

// RemoveMessages removes "messages" edges to Message entities.
func (du *DialogUpdate) RemoveMessages(m ...*Message) *DialogUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DialogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DialogUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DialogUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DialogUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DialogUpdate) check() error {
	if v, ok := du.mutation.GetType(); ok {
		if err := dialog.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Dialog.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (du *DialogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DialogUpdate {
	du.modifiers = append(du.modifiers, modifiers...)
	return du
}

func (du *DialogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dialog.Table, dialog.Columns, sqlgraph.NewFieldSpec(dialog.FieldID, field.TypeInt64))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Title(); ok {
		_spec.SetField(dialog.FieldTitle, field.TypeString, value)
	}
	if value, ok := du.mutation.GetType(); ok {
		_spec.SetField(dialog.FieldType, field.TypeEnum, value)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(dialog.FieldUpdatedAt, field.TypeTime, value)
	}
	if du.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dialog.MessagesTable,
			Columns: []string{dialog.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !du.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dialog.MessagesTable,
			Columns: []string{dialog.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dialog.MessagesTable,
			Columns: []string{dialog.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(du.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dialog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DialogUpdateOne is the builder for updating a single Dialog entity.
type DialogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DialogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTitle sets the "title" field.
func (duo *DialogUpdateOne) SetTitle(s string) *DialogUpdateOne {
	duo.mutation.SetTitle(s)
	return duo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (duo *DialogUpdateOne) SetNillableTitle(s *string) *DialogUpdateOne {
	if s != nil {
		duo.SetTitle(*s)
	}
	return duo
}

// SetType sets the "type" field.
func (duo *DialogUpdateOne) SetType(tt types.DialogType) *DialogUpdateOne {
	duo.mutation.SetType(tt)
	return duo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (duo *DialogUpdateOne) SetNillableType(tt *types.DialogType) *DialogUpdateOne {
	if tt != nil {
		duo.SetType(*tt)
	}
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DialogUpdateOne) SetUpdatedAt(t time.Time) *DialogUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (duo *DialogUpdateOne) SetNillableUpdatedAt(t *time.Time) *DialogUpdateOne {
	if t != nil {
		duo.SetUpdatedAt(*t)
	}
	return duo
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (duo *DialogUpdateOne) AddMessageIDs(ids ...uuid.UUID) *DialogUpdateOne {
	duo.mutation.AddMessageIDs(ids...)
	return duo
}

// AddMessages adds the "messages" edges to the Message entity.
func (duo *DialogUpdateOne) AddMessages(m ...*Message) *DialogUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.AddMessageIDs(ids...)
}

// Mutation returns the DialogMutation object of the builder.
func (duo *DialogUpdateOne) Mutation() *DialogMutation {
	return duo.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (duo *DialogUpdateOne) ClearMessages() *DialogUpdateOne {
	duo.mutation.ClearMessages()
	return duo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (duo *DialogUpdateOne) RemoveMessageIDs(ids ...uuid.UUID) *DialogUpdateOne {
	duo.mutation.RemoveMessageIDs(ids...)
	return duo
}

// RemoveMessages removes "messages" edges to Message entities.
func (duo *DialogUpdateOne) RemoveMessages(m ...*Message) *DialogUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.RemoveMessageIDs(ids...)
}

// Where appends a list predicates to the DialogUpdate builder.
func (duo *DialogUpdateOne) Where(ps ...predicate.Dialog) *DialogUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DialogUpdateOne) Select(field string, fields ...string) *DialogUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dialog entity.
func (duo *DialogUpdateOne) Save(ctx context.Context) (*Dialog, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DialogUpdateOne) SaveX(ctx context.Context) *Dialog {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DialogUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DialogUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DialogUpdateOne) check() error {
	if v, ok := duo.mutation.GetType(); ok {
		if err := dialog.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Dialog.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (duo *DialogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DialogUpdateOne {
	duo.modifiers = append(duo.modifiers, modifiers...)
	return duo
}

func (duo *DialogUpdateOne) sqlSave(ctx context.Context) (_node *Dialog, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dialog.Table, dialog.Columns, sqlgraph.NewFieldSpec(dialog.FieldID, field.TypeInt64))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dialog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dialog.FieldID)
		for _, f := range fields {
			if !dialog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dialog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Title(); ok {
		_spec.SetField(dialog.FieldTitle, field.TypeString, value)
	}
	if value, ok := duo.mutation.GetType(); ok {
		_spec.SetField(dialog.FieldType, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(dialog.FieldUpdatedAt, field.TypeTime, value)
	}
	if duo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dialog.MessagesTable,
			Columns: []string{dialog.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !duo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dialog.MessagesTable,
			Columns: []string{dialog.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dialog.MessagesTable,
			Columns: []string{dialog.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(duo.modifiers...)
	_node = &Dialog{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dialog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
