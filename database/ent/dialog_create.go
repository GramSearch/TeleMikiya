// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/xyenon/telemikiya/database/ent/dialog"
	"github.com/xyenon/telemikiya/database/ent/message"
	"github.com/xyenon/telemikiya/types"
)

// DialogCreate is the builder for creating a Dialog entity.
type DialogCreate struct {
	config
	mutation *DialogMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (dc *DialogCreate) SetTitle(s string) *DialogCreate {
	dc.mutation.SetTitle(s)
	return dc
}

// SetType sets the "type" field.
func (dc *DialogCreate) SetType(tt types.DialogType) *DialogCreate {
	dc.mutation.SetType(tt)
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DialogCreate) SetUpdatedAt(t time.Time) *DialogCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DialogCreate) SetNillableUpdatedAt(t *time.Time) *DialogCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DialogCreate) SetID(i int64) *DialogCreate {
	dc.mutation.SetID(i)
	return dc
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (dc *DialogCreate) AddMessageIDs(ids ...uuid.UUID) *DialogCreate {
	dc.mutation.AddMessageIDs(ids...)
	return dc
}

// AddMessages adds the "messages" edges to the Message entity.
func (dc *DialogCreate) AddMessages(m ...*Message) *DialogCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dc.AddMessageIDs(ids...)
}

// Mutation returns the DialogMutation object of the builder.
func (dc *DialogCreate) Mutation() *DialogMutation {
	return dc.mutation
}

// Save creates the Dialog in the database.
func (dc *DialogCreate) Save(ctx context.Context) (*Dialog, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DialogCreate) SaveX(ctx context.Context) *Dialog {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DialogCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DialogCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DialogCreate) defaults() {
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := dialog.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DialogCreate) check() error {
	if _, ok := dc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Dialog.title"`)}
	}
	if _, ok := dc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Dialog.type"`)}
	}
	if v, ok := dc.mutation.GetType(); ok {
		if err := dialog.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Dialog.type": %w`, err)}
		}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Dialog.updated_at"`)}
	}
	return nil
}

func (dc *DialogCreate) sqlSave(ctx context.Context) (*Dialog, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DialogCreate) createSpec() (*Dialog, *sqlgraph.CreateSpec) {
	var (
		_node = &Dialog{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(dialog.Table, sqlgraph.NewFieldSpec(dialog.FieldID, field.TypeInt64))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Title(); ok {
		_spec.SetField(dialog.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := dc.mutation.GetType(); ok {
		_spec.SetField(dialog.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(dialog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := dc.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dialog.MessagesTable,
			Columns: []string{dialog.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DialogCreateBulk is the builder for creating many Dialog entities in bulk.
type DialogCreateBulk struct {
	config
	err      error
	builders []*DialogCreate
}

// Save creates the Dialog entities in the database.
func (dcb *DialogCreateBulk) Save(ctx context.Context) ([]*Dialog, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Dialog, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DialogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DialogCreateBulk) SaveX(ctx context.Context) []*Dialog {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DialogCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DialogCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
