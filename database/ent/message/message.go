// Code generated by ent, DO NOT EDIT.

package message

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMsgID holds the string denoting the msg_id field in the database.
	FieldMsgID = "msg_id"
	// FieldDialogID holds the string denoting the dialog_id field in the database.
	FieldDialogID = "dialog_id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldTextEmbedding holds the string denoting the text_embedding field in the database.
	FieldTextEmbedding = "text_embedding"
	// FieldHasMedia holds the string denoting the has_media field in the database.
	FieldHasMedia = "has_media"
	// FieldMediaInfo holds the string denoting the media_info field in the database.
	FieldMediaInfo = "media_info"
	// FieldSentAt holds the string denoting the sent_at field in the database.
	FieldSentAt = "sent_at"
	// EdgeDialog holds the string denoting the dialog edge name in mutations.
	EdgeDialog = "dialog"
	// Table holds the table name of the message in the database.
	Table = "messages"
	// DialogTable is the table that holds the dialog relation/edge.
	DialogTable = "messages"
	// DialogInverseTable is the table name for the Dialog entity.
	// It exists in this package in order to avoid circular dependency with the "dialog" package.
	DialogInverseTable = "dialogs"
	// DialogColumn is the table column denoting the dialog relation/edge.
	DialogColumn = "dialog_id"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldMsgID,
	FieldDialogID,
	FieldText,
	FieldTextEmbedding,
	FieldHasMedia,
	FieldMediaInfo,
	FieldSentAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Message queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMsgID orders the results by the msg_id field.
func ByMsgID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMsgID, opts...).ToFunc()
}

// ByDialogID orders the results by the dialog_id field.
func ByDialogID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDialogID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByTextEmbedding orders the results by the text_embedding field.
func ByTextEmbedding(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTextEmbedding, opts...).ToFunc()
}

// ByHasMedia orders the results by the has_media field.
func ByHasMedia(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasMedia, opts...).ToFunc()
}

// BySentAt orders the results by the sent_at field.
func BySentAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentAt, opts...).ToFunc()
}

// ByDialogField orders the results by dialog field.
func ByDialogField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDialogStep(), sql.OrderByField(field, opts...))
	}
}
func newDialogStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DialogInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DialogTable, DialogColumn),
	)
}
