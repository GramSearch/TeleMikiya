// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/xyenon/telemikiya/database/ent/dialog"
	"github.com/xyenon/telemikiya/types"
)

// Dialog is the model entity for the Dialog schema.
type Dialog struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Type holds the value of the "type" field.
	Type types.DialogType `json:"type,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DialogQuery when eager-loading is set.
	Edges        DialogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DialogEdges holds the relations/edges for other nodes in the graph.
type DialogEdges struct {
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e DialogEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[0] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dialog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dialog.FieldID:
			values[i] = new(sql.NullInt64)
		case dialog.FieldTitle, dialog.FieldType:
			values[i] = new(sql.NullString)
		case dialog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dialog fields.
func (d *Dialog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dialog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int64(value.Int64)
		case dialog.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				d.Title = value.String
			}
		case dialog.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				d.Type = types.DialogType(value.String)
			}
		case dialog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Dialog.
// This includes values selected through modifiers, order, etc.
func (d *Dialog) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryMessages queries the "messages" edge of the Dialog entity.
func (d *Dialog) QueryMessages() *MessageQuery {
	return NewDialogClient(d.config).QueryMessages(d)
}

// Update returns a builder for updating this Dialog.
// Note that you need to call Dialog.Unwrap() before calling this method if this Dialog
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dialog) Update() *DialogUpdateOne {
	return NewDialogClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Dialog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dialog) Unwrap() *Dialog {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dialog is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dialog) String() string {
	var builder strings.Builder
	builder.WriteString("Dialog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("title=")
	builder.WriteString(d.Title)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", d.Type))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Dialogs is a parsable slice of Dialog.
type Dialogs []*Dialog
